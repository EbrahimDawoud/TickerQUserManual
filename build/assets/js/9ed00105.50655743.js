"use strict";(globalThis.webpackChunktickerq_docs=globalThis.webpackChunktickerq_docs||[]).push([[873],{8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var i=r(6540);const o={},t=i.createContext(o);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(t.Provider,{value:n},e.children)}},8633:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"configuration","title":"Configuration","description":"This guide covers how to configure TickerQ in your .NET application.","source":"@site/docs/configuration.md","sourceDirName":".","slug":"/configuration","permalink":"/docs/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/configuration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/docs/installation"},"next":{"title":"Cron Jobs","permalink":"/docs/cron-jobs"}}');var o=r(4848),t=r(8453);const a={},s="Configuration",c={},d=[{value:"Basic Setup",id:"basic-setup",level:2},{value:"1. Program.cs Configuration",id:"1-programcs-configuration",level:3},{value:"2. Configuration Options",id:"2-configuration-options",level:3},{value:"Max Concurrency",id:"max-concurrency",level:4},{value:"Operational Store",id:"operational-store",level:4},{value:"Dashboard Configuration",id:"dashboard-configuration",level:4},{value:"Exception Handler",id:"exception-handler",level:4},{value:"appsettings.json Configuration",id:"appsettingsjson-configuration",level:2},{value:"Basic Authentication",id:"basic-authentication",level:3},{value:"Cron Expressions",id:"cron-expressions",level:3},{value:"Logging Configuration",id:"logging-configuration",level:3},{value:"Service Registration",id:"service-registration",level:2},{value:"Middleware Order",id:"middleware-order",level:2},{value:"Start Modes",id:"start-modes",level:2},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,o.jsx)(n.p,{children:"This guide covers how to configure TickerQ in your .NET application."}),"\n",(0,o.jsx)(n.h2,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,o.jsx)(n.h3,{id:"1-programcs-configuration",children:"1. Program.cs Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["Add TickerQ services to your ",(0,o.jsx)(n.code,{children:"Program.cs"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'using TickerQ.DependencyInjection;\r\nusing TickerQ.EntityFrameworkCore.DependencyInjection;\r\nusing TickerQ.Dashboard.DependencyInjection;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Configure DbContext\r\nbuilder.Services.AddDbContext<ApplicationDbContext>(options =>\r\n    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));\r\n\r\n// Configure TickerQ\r\nbuilder.Services.AddTickerQ(options =>\r\n{\r\n    options.SetMaxConcurrency(4);\r\n    options.AddOperationalStore<ApplicationDbContext>(efOpt =>\r\n    {\r\n        efOpt.UseModelCustomizerForMigrations();\r\n    });\r\n    options.AddDashboard(options =>\r\n    {\r\n        options.BasePath = "/dashboard";\r\n        options.EnableBasicAuth = true;\r\n    });\r\n    options.SetExceptionHandler<TickerExceptionHandler>();\r\n});\r\n\r\nvar app = builder.Build();\r\n\r\n// Enable TickerQ middleware\r\napp.UseTickerQ(qStartMode: TickerQ.Utilities.Enums.TickerQStartMode.Immediate);\r\n\r\napp.Run();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-configuration-options",children:"2. Configuration Options"}),"\n",(0,o.jsx)(n.h4,{id:"max-concurrency",children:"Max Concurrency"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"options.SetMaxConcurrency(4); // Maximum 4 concurrent jobs\n"})}),"\n",(0,o.jsx)(n.h4,{id:"operational-store",children:"Operational Store"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"options.AddOperationalStore<ApplicationDbContext>(efOpt =>\r\n{\r\n    efOpt.UseModelCustomizerForMigrations();\r\n    // efOpt.CancelMissedTickersOnAppStart(); // Optional\r\n});\n"})}),"\n",(0,o.jsx)(n.h4,{id:"dashboard-configuration",children:"Dashboard Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'options.AddDashboard(options =>\r\n{\r\n    options.BasePath = "/dashboard";        // Dashboard URL path\r\n    options.EnableBasicAuth = true;        // Enable authentication\r\n});\n'})}),"\n",(0,o.jsx)(n.h4,{id:"exception-handler",children:"Exception Handler"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"options.SetExceptionHandler<TickerExceptionHandler>();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"appsettingsjson-configuration",children:"appsettings.json Configuration"}),"\n",(0,o.jsx)(n.h3,{id:"basic-authentication",children:"Basic Authentication"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\r\n  "TickerQBasicAuth": {\r\n    "username": "admin",\r\n    "password": "admin"\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"cron-expressions",children:"Cron Expressions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\r\n  "CronTicker": {\r\n    "EveryMinute": "* * * * *"\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"logging-configuration",children:"Logging Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\r\n  "Logging": {\r\n    "LogLevel": {\r\n      "Default": "Information",\r\n      "Microsoft.AspNetCore": "Warning",\r\n      "Microsoft.EntityFrameworkCore.Database.Command": "Warning",\r\n      "Microsoft.EntityFrameworkCore": "Warning"\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"service-registration",children:"Service Registration"}),"\n",(0,o.jsx)(n.p,{children:"Register your job classes in the DI container:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"// Repository DI\r\nbuilder.Services.AddScoped(typeof(IRepository<>), typeof(Repository<>));\r\n\r\n// Services DI\r\nbuilder.Services.AddScoped<RequestService>();\r\nbuilder.Services.AddScoped<BackgroundJobs>();\r\nbuilder.Services.AddScoped<JobWithData>();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"middleware-order",children:"Middleware Order"}),"\n",(0,o.jsx)(n.p,{children:"Ensure TickerQ middleware is added in the correct order:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var app = builder.Build();\r\n\r\n// Other middleware\r\napp.UseSwagger();\r\napp.UseSwaggerUI();\r\napp.UseHttpsRedirection();\r\n\r\n// TickerQ middleware\r\napp.UseTickerQ(qStartMode: TickerQ.Utilities.Enums.TickerQStartMode.Immediate);\r\n\r\napp.MapControllers();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"start-modes",children:"Start Modes"}),"\n",(0,o.jsx)(n.p,{children:"TickerQ supports different start modes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Immediate"}),": Start processing jobs immediately"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Delayed"}),": Start after a delay"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Manual"}),": Start manually via API"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"app.UseTickerQ(qStartMode: TickerQ.Utilities.Enums.TickerQStartMode.Immediate);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(n.p,{children:["Now that TickerQ is configured, learn about ",(0,o.jsx)(n.a,{href:"/docs/cron-jobs",children:"Cron Jobs"})," for scheduled background tasks."]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);