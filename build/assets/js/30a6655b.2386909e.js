"use strict";(globalThis.webpackChunktickerq_docs=globalThis.webpackChunktickerq_docs||[]).push([[925],{2145:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"time-jobs","title":"Time Jobs","description":"Time jobs are one-time scheduled tasks that execute at a specific time in the future.","source":"@site/docs/time-jobs.md","sourceDirName":".","slug":"/time-jobs","permalink":"/docs/time-jobs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/time-jobs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Cron Jobs","permalink":"/docs/cron-jobs"},"next":{"title":"Exception Handling","permalink":"/docs/exception-handling"}}');var t=i(4848),s=i(8453);const c={},l="Time Jobs",a={},d=[{value:"ITimeTickerManager",id:"itimetickermanager",level:2},{value:"TimeTicker Properties",id:"timeticker-properties",level:2},{value:"Example: CleanUp Job",id:"example-cleanup-job",level:2},{value:"Scheduling Jobs via API",id:"scheduling-jobs-via-api",level:2},{value:"Basic Scheduling",id:"basic-scheduling",level:3},{value:"With Custom Data",id:"with-custom-data",level:3},{value:"TickerFunctionContext",id:"tickerfunctioncontext",level:2},{value:"Retry Configuration",id:"retry-configuration",level:2},{value:"Retry Attempts",id:"retry-attempts",level:3},{value:"Retry Intervals",id:"retry-intervals",level:3},{value:"No Retries",id:"no-retries",level:3},{value:"Execution Time Examples",id:"execution-time-examples",level:2},{value:"Job Lifecycle",id:"job-lifecycle",level:2},{value:"Monitoring Jobs",id:"monitoring-jobs",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"time-jobs",children:"Time Jobs"})}),"\n",(0,t.jsx)(n.p,{children:"Time jobs are one-time scheduled tasks that execute at a specific time in the future."}),"\n",(0,t.jsx)(n.h2,{id:"itimetickermanager",children:"ITimeTickerManager"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"ITimeTickerManager<TimeTicker>"})," to schedule one-time jobs:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class RequestsController(RequestService _service)\r\n{\r\n    [HttpPost("Schedule")]\r\n    public async Task<ActionResult> ScheduleBackgroundJobs(Point point, ITimeTickerManager<TimeTicker> manager)\r\n    {\r\n        await manager.AddAsync(new TimeTicker\r\n        {\r\n            Request = TickerHelper.CreateTickerRequest(point),\r\n            ExecutionTime = DateTime.UtcNow.AddSeconds(10),\r\n            Function = "CleanUp",\r\n            Retries = 3,\r\n            RetryIntervals = [1, 2, 3],\r\n            Description = "Job with data example"\r\n        });\r\n        return Ok("Background job scheduled.");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"timeticker-properties",children:"TimeTicker Properties"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Request"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"Data to pass to the job"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ExecutionTime"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DateTime"})}),(0,t.jsx)(n.td,{children:"When to execute the job"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Function"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Name of the method to execute"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Retries"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"int"})}),(0,t.jsx)(n.td,{children:"Number of retry attempts"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"RetryIntervals"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"int[]"})}),(0,t.jsx)(n.td,{children:"Delay between retries in seconds"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Description"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"Human-readable description"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"example-cleanup-job",children:"Example: CleanUp Job"}),"\n",(0,t.jsx)(n.p,{children:"Here's a simple job that processes data:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class JobWithData\r\n{\r\n    [TickerFunction("CleanUp")]\r\n    public void CleanUp(TickerFunctionContext<Point> ticker)\r\n    {\r\n        Console.WriteLine($"X: {ticker.Request.X}, Y: {ticker.Request.Y}");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"scheduling-jobs-via-api",children:"Scheduling Jobs via API"}),"\n",(0,t.jsx)(n.h3,{id:"basic-scheduling",children:"Basic Scheduling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[HttpPost("Schedule")]\r\npublic async Task<ActionResult> ScheduleJob(ITimeTickerManager<TimeTicker> manager)\r\n{\r\n    await manager.AddAsync(new TimeTicker\r\n    {\r\n        Request = TickerHelper.CreateTickerRequest(new { message = "Hello World" }),\r\n        ExecutionTime = DateTime.UtcNow.AddMinutes(5),\r\n        Function = "ProcessMessage",\r\n        Retries = 2,\r\n        RetryIntervals = [30, 60],\r\n        Description = "Process message in 5 minutes"\r\n    });\r\n    \r\n    return Ok("Job scheduled successfully");\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"with-custom-data",children:"With Custom Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[HttpPost("ScheduleWithData")]\r\npublic async Task<ActionResult> ScheduleWithData(MyDataModel data, ITimeTickerManager<TimeTicker> manager)\r\n{\r\n    await manager.AddAsync(new TimeTicker\r\n    {\r\n        Request = TickerHelper.CreateTickerRequest(data),\r\n        ExecutionTime = DateTime.UtcNow.AddHours(1),\r\n        Function = "ProcessData",\r\n        Retries = 3,\r\n        RetryIntervals = [1, 5, 15],\r\n        Description = $"Process data: {data.Id}"\r\n    });\r\n    \r\n    return Ok($"Job scheduled for {data.Id}");\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"tickerfunctioncontext",children:"TickerFunctionContext"}),"\n",(0,t.jsx)(n.p,{children:"Access typed data in your job methods:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'[TickerFunction("ProcessData")]\r\npublic async Task ProcessData(TickerFunctionContext<MyDataModel> context, CancellationToken cancellationToken)\r\n{\r\n    var data = context.Request; // Strongly typed data\r\n    var cancellationToken = context.CancellationToken;\r\n    \r\n    // Process the data\r\n    await ProcessAsync(data);\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"retry-configuration",children:"Retry Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"retry-attempts",children:"Retry Attempts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"Retries = 3, // Will retry up to 3 times on failure\n"})}),"\n",(0,t.jsx)(n.h3,{id:"retry-intervals",children:"Retry Intervals"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"RetryIntervals = [1, 2, 3], // Wait 1s, then 2s, then 3s between retries\n"})}),"\n",(0,t.jsx)(n.h3,{id:"no-retries",children:"No Retries"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"Retries = 0, // No retries - fail immediately\r\nRetryIntervals = [], // Empty array\n"})}),"\n",(0,t.jsx)(n.h2,{id:"execution-time-examples",children:"Execution Time Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"// Execute in 10 seconds\r\nExecutionTime = DateTime.UtcNow.AddSeconds(10)\r\n\r\n// Execute in 5 minutes\r\nExecutionTime = DateTime.UtcNow.AddMinutes(5)\r\n\r\n// Execute in 1 hour\r\nExecutionTime = DateTime.UtcNow.AddHours(1)\r\n\r\n// Execute at specific time\r\nExecutionTime = new DateTime(2024, 12, 25, 10, 0, 0) // Christmas at 10 AM\n"})}),"\n",(0,t.jsx)(n.h2,{id:"job-lifecycle",children:"Job Lifecycle"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scheduled"})," - Job is added to the queue"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pending"})," - Waiting for execution time"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Running"})," - Currently executing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Completed"})," - Successfully finished"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Failed"})," - Failed after all retries"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cancelled"})," - Manually cancelled"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-jobs",children:"Monitoring Jobs"}),"\n",(0,t.jsx)(n.p,{children:"View scheduled jobs in the TickerQ Dashboard:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Navigate to ",(0,t.jsx)(n.code,{children:"/dashboard"})]}),"\n",(0,t.jsxs)(n.li,{children:["Login with credentials from ",(0,t.jsx)(n.code,{children:"appsettings.json"})]}),"\n",(0,t.jsx)(n.li,{children:"View job status and execution history"}),"\n",(0,t.jsx)(n.li,{children:"Monitor retry attempts and failures"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use meaningful descriptions"})," for easy identification"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Set appropriate retry counts"})," based on job criticality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Handle exceptions"})," in your job methods"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use CancellationToken"})," for cancellation support"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Log job execution"})," for debugging"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clean up resources"})," in finally blocks"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.p,{children:["Learn about ",(0,t.jsx)(n.a,{href:"/docs/exception-handling",children:"Exception Handling"})," for managing job failures."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>l});var r=i(6540);const t={},s=r.createContext(t);function c(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);