"use strict";(globalThis.webpackChunktickerq_docs=globalThis.webpackChunktickerq_docs||[]).push([[550],{6249:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"exception-handling","title":"Exception Handling","description":"TickerQ provides a robust exception handling system that allows you to customize how job failures are managed.","source":"@site/docs/exception-handling.md","sourceDirName":".","slug":"/exception-handling","permalink":"/docs/exception-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/exception-handling.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Time Jobs","permalink":"/docs/time-jobs"},"next":{"title":"Dashboard","permalink":"/docs/dashboard"}}');var r=i(4848),c=i(8453);const a={},o="Exception Handling",s={},l=[{value:"ITickerExceptionHandler Interface",id:"itickerexceptionhandler-interface",level:2},{value:"Handler Methods",id:"handler-methods",level:2},{value:"HandleExceptionAsync",id:"handleexceptionasync",level:3},{value:"HandleCanceledExceptionAsync",id:"handlecanceledexceptionasync",level:3},{value:"Registration",id:"registration",level:2},{value:"Advanced Exception Handling",id:"advanced-exception-handling",level:2},{value:"Custom Exception Types",id:"custom-exception-types",level:3},{value:"Notification System",id:"notification-system",level:3},{value:"Retry Logic",id:"retry-logic",level:3},{value:"Testing Exception Handling",id:"testing-exception-handling",level:2},{value:"Create Test Jobs",id:"create-test-jobs",level:3},{value:"Monitor in Dashboard",id:"monitor-in-dashboard",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Database Exception Handling",id:"database-exception-handling",level:3},{value:"HTTP Exception Handling",id:"http-exception-handling",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"exception-handling",children:"Exception Handling"})}),"\n",(0,r.jsx)(n.p,{children:"TickerQ provides a robust exception handling system that allows you to customize how job failures are managed."}),"\n",(0,r.jsx)(n.h2,{id:"itickerexceptionhandler-interface",children:"ITickerExceptionHandler Interface"}),"\n",(0,r.jsxs)(n.p,{children:["Implement the ",(0,r.jsx)(n.code,{children:"ITickerExceptionHandler"})," interface to handle job exceptions:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using TickerQ.Utilities.Base;\r\nusing TickerQ.Utilities.Enums;\r\nusing TickerQ.Utilities.Interfaces;\r\n\r\npublic class TickerExceptionHandler(ILogger<TickerExceptionHandler> logger) : ITickerExceptionHandler\r\n{\r\n    public async Task HandleExceptionAsync(Exception exception, Guid tickerId, TickerType tickerType)\r\n    {\r\n        Console.WriteLine($"\ud83d\udea8 EXCEPTION - ID: {tickerId}, Type: {tickerType}, Error: {exception.Message}");\r\n        logger.LogError(exception, "TickerQ job failed - ID: {TickerId}, Type: {TickerType}", tickerId, tickerType);\r\n        await Task.CompletedTask;\r\n    }\r\n\r\n    public async Task HandleCanceledExceptionAsync(Exception exception, Guid tickerId, TickerType tickerType)\r\n    {\r\n        Console.WriteLine($"\u23f9\ufe0f CANCELLED - ID: {tickerId}, Type: {tickerType}, Reason: {exception.Message}");\r\n        logger.LogWarning("TickerQ job cancelled - ID: {TickerId}, Type: {TickerType}", tickerId, tickerType);\r\n        await Task.CompletedTask;\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"handler-methods",children:"Handler Methods"}),"\n",(0,r.jsx)(n.h3,{id:"handleexceptionasync",children:"HandleExceptionAsync"}),"\n",(0,r.jsx)(n.p,{children:"Called when a job throws an exception:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public async Task HandleExceptionAsync(Exception exception, Guid tickerId, TickerType tickerType)\r\n{\r\n    // Log the exception\r\n    logger.LogError(exception, "Job {TickerId} of type {TickerType} failed", tickerId, tickerType);\r\n    \r\n    // Send notifications\r\n    await SendFailureNotification(tickerId, exception);\r\n    \r\n    // Update database status\r\n    await UpdateJobStatus(tickerId, JobStatus.Failed);\r\n    \r\n    // Custom business logic\r\n    if (exception is DatabaseConnectionException)\r\n    {\r\n        await ScheduleRetry(tickerId);\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"handlecanceledexceptionasync",children:"HandleCanceledExceptionAsync"}),"\n",(0,r.jsx)(n.p,{children:"Called when a job is cancelled:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public async Task HandleCanceledExceptionAsync(Exception exception, Guid tickerId, TickerType tickerType)\r\n{\r\n    logger.LogWarning("Job {TickerId} was cancelled", tickerId);\r\n    \r\n    // Clean up resources\r\n    await CleanupJobResources(tickerId);\r\n    \r\n    // Update status\r\n    await UpdateJobStatus(tickerId, JobStatus.Cancelled);\r\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"registration",children:"Registration"}),"\n",(0,r.jsxs)(n.p,{children:["Register your exception handler in ",(0,r.jsx)(n.code,{children:"Program.cs"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"builder.Services.AddTickerQ(options =>\r\n{\r\n    // ... other options\r\n    options.SetExceptionHandler<TickerExceptionHandler>();\r\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-exception-handling",children:"Advanced Exception Handling"}),"\n",(0,r.jsx)(n.h3,{id:"custom-exception-types",children:"Custom Exception Types"}),"\n",(0,r.jsx)(n.p,{children:"Handle different exception types differently:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public async Task HandleExceptionAsync(Exception exception, Guid tickerId, TickerType tickerType)\r\n{\r\n    switch (exception)\r\n    {\r\n        case DatabaseConnectionException dbEx:\r\n            await HandleDatabaseException(dbEx, tickerId);\r\n            break;\r\n        case TimeoutException timeoutEx:\r\n            await HandleTimeoutException(timeoutEx, tickerId);\r\n            break;\r\n        case ValidationException validationEx:\r\n            await HandleValidationException(validationEx, tickerId);\r\n            break;\r\n        default:\r\n            await HandleGenericException(exception, tickerId);\r\n            break;\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"notification-system",children:"Notification System"}),"\n",(0,r.jsx)(n.p,{children:"Send notifications for critical failures:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'public async Task HandleExceptionAsync(Exception exception, Guid tickerId, TickerType tickerType)\r\n{\r\n    // Log the exception\r\n    logger.LogError(exception, "Critical job failure: {TickerId}", tickerId);\r\n    \r\n    // Send email notification for critical jobs\r\n    if (IsCriticalJob(tickerId))\r\n    {\r\n        await emailService.SendCriticalFailureAlert(tickerId, exception);\r\n    }\r\n    \r\n    // Send Slack notification\r\n    await slackService.SendJobFailureNotification(tickerId, exception.Message);\r\n    \r\n    // Create support ticket\r\n    await supportService.CreateTicket(tickerId, exception);\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"retry-logic",children:"Retry Logic"}),"\n",(0,r.jsx)(n.p,{children:"Implement custom retry strategies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public async Task HandleExceptionAsync(Exception exception, Guid tickerId, TickerType tickerType)\r\n{\r\n    var retryCount = await GetRetryCount(tickerId);\r\n    \r\n    if (retryCount < MaxRetries && IsRetryableException(exception))\r\n    {\r\n        var delay = CalculateRetryDelay(retryCount);\r\n        await ScheduleRetry(tickerId, delay);\r\n    }\r\n    else\r\n    {\r\n        await MarkJobAsFailed(tickerId);\r\n    }\r\n}\r\n\r\nprivate bool IsRetryableException(Exception exception)\r\n{\r\n    return exception is DatabaseConnectionException ||\r\n           exception is TimeoutException ||\r\n           exception is HttpRequestException;\r\n}\r\n\r\nprivate TimeSpan CalculateRetryDelay(int retryCount)\r\n{\r\n    return TimeSpan.FromMinutes(Math.Pow(2, retryCount)); // Exponential backoff\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-exception-handling",children:"Testing Exception Handling"}),"\n",(0,r.jsx)(n.h3,{id:"create-test-jobs",children:"Create Test Jobs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'[TickerFunction("TestException", "*/1 * * * *")]\r\npublic async Task TestException(TickerFunctionContext context, CancellationToken cancellationToken)\r\n{\r\n    Console.WriteLine($"\ud83d\udca5 Exception test started at {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}");\r\n    await Task.Delay(1000, cancellationToken);\r\n    throw new InvalidOperationException("Test exception for TickerQ exception handler!");\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"monitor-in-dashboard",children:"Monitor in Dashboard"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Navigate to ",(0,r.jsx)(n.code,{children:"/dashboard"})]}),"\n",(0,r.jsx)(n.li,{children:"View job execution history"}),"\n",(0,r.jsx)(n.li,{children:"Check exception details"}),"\n",(0,r.jsx)(n.li,{children:"Monitor retry attempts"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Log all exceptions"})," with sufficient context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use structured logging"})," for better searchability"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle different exception types"})," appropriately"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implement retry logic"})," for transient failures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Send notifications"})," for critical failures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clean up resources"})," on cancellation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Update job status"})," in your database"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test exception scenarios"})," thoroughly"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"database-exception-handling",children:"Database Exception Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"if (exception is SqlException sqlEx)\r\n{\r\n    if (sqlEx.Number == 2) // Timeout\r\n    {\r\n        await ScheduleRetry(tickerId, TimeSpan.FromMinutes(5));\r\n    }\r\n    else if (sqlEx.Number == 1205) // Deadlock\r\n    {\r\n        await ScheduleRetry(tickerId, TimeSpan.FromSeconds(30));\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"http-exception-handling",children:"HTTP Exception Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'if (exception is HttpRequestException httpEx)\r\n{\r\n    if (httpEx.Message.Contains("timeout"))\r\n    {\r\n        await ScheduleRetry(tickerId, TimeSpan.FromMinutes(2));\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.p,{children:["Learn about the ",(0,r.jsx)(n.a,{href:"/docs/dashboard",children:"Dashboard"})," for monitoring and managing your jobs."]})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const r={},c=t.createContext(r);function a(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);