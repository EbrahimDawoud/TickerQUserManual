"use strict";(globalThis.webpackChunktickerq_docs=globalThis.webpackChunktickerq_docs||[]).push([[443],{3588:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api-reference","title":"API Reference","description":"Complete code examples and implementation patterns for TickerQ integration.","source":"@site/docs/api-reference.md","sourceDirName":".","slug":"/api-reference","permalink":"/docs/api-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-reference.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Dashboard","permalink":"/docs/dashboard"}}');var t=n(4848),s=n(8453);const o={},a="API Reference",c={},l=[{value:"Service Registration",id:"service-registration",level:2},{value:"Program.cs Setup",id:"programcs-setup",level:3},{value:"Job Classes",id:"job-classes",level:2},{value:"Background Jobs with Cron Scheduling",id:"background-jobs-with-cron-scheduling",level:3},{value:"Time-based Jobs",id:"time-based-jobs",level:3},{value:"Exception Handler",id:"exception-handler",level:2},{value:"API Controllers",id:"api-controllers",level:2},{value:"Scheduling Time Jobs",id:"scheduling-time-jobs",level:3},{value:"Configuration Files",id:"configuration-files",level:2},{value:"appsettings.json",id:"appsettingsjson",level:3},{value:"Project File (.csproj)",id:"project-file-csproj",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Repository Pattern",id:"repository-pattern",level:3},{value:"Service Registration",id:"service-registration-1",level:3},{value:"Dependency Injection",id:"dependency-injection",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"api-reference",children:"API Reference"})}),"\n",(0,t.jsx)(r.p,{children:"Complete code examples and implementation patterns for TickerQ integration."}),"\n",(0,t.jsx)(r.h2,{id:"service-registration",children:"Service Registration"}),"\n",(0,t.jsx)(r.h3,{id:"programcs-setup",children:"Program.cs Setup"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'using Application.Interfaces;\r\nusing Application.Jobs;\r\nusing Application.Services;\r\nusing Infrastructure.Persistence;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing TickerQ.DependencyInjection;\r\nusing TickerQ.EntityFrameworkCore.DependencyInjection;\r\nusing TickerQ.Dashboard.DependencyInjection;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Configure DbContext\r\nbuilder.Services.AddDbContext<ApplicationDbContext>(options =>\r\n    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));\r\n\r\n// Configure TickerQ\r\nbuilder.Services.AddTickerQ(options =>\r\n{\r\n    options.SetMaxConcurrency(4);\r\n    options.AddOperationalStore<ApplicationDbContext>(efOpt =>\r\n    {\r\n        efOpt.UseModelCustomizerForMigrations();\r\n    });\r\n    options.AddDashboard(options =>\r\n    {\r\n        options.BasePath = "/dashboard";\r\n        options.EnableBasicAuth = true;\r\n    });\r\n    options.SetExceptionHandler<TickerExceptionHandler>();\r\n});\r\n\r\n// Repository DI\r\nbuilder.Services.AddScoped(typeof(IRepository<>), typeof(Repository<>));\r\n\r\n// Services DI\r\nbuilder.Services.AddScoped<RequestService>();\r\nbuilder.Services.AddScoped<BackgroundJobs>();\r\nbuilder.Services.AddScoped<JobWithData>();\r\n\r\nvar app = builder.Build();\r\n\r\n// Configure the HTTP request pipeline\r\napp.UseSwagger();\r\napp.UseSwaggerUI();\r\napp.UseHttpsRedirection();\r\n\r\n// Enable TickerQ with Dashboard\r\napp.UseTickerQ(qStartMode: TickerQ.Utilities.Enums.TickerQStartMode.Immediate);\r\n\r\napp.MapControllers();\r\napp.Run();\n'})}),"\n",(0,t.jsx)(r.h2,{id:"job-classes",children:"Job Classes"}),"\n",(0,t.jsx)(r.h3,{id:"background-jobs-with-cron-scheduling",children:"Background Jobs with Cron Scheduling"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'using Application.Interfaces;\r\nusing Domain.Entities;\r\nusing Domain.Enums;\r\nusing Microsoft.Extensions.Logging;\r\nusing TickerQ.Utilities.Base;\r\nusing TickerQ.Utilities.Models;\r\n\r\nnamespace Application.Jobs;\r\n\r\npublic class BackgroundJobs(\r\n    IRepository<RequestEntity> _requestRepository, \r\n    IRepository<RequestLog> _logRepository, \r\n    IRepository<Report> _reportRepository, \r\n    ILogger<RequestEntity> logger)\r\n{\r\n    [TickerFunction("AutoReject", "*/30 * * * *")]\r\n    public async Task RejectStaleApprovedRequests(CancellationToken cancellationToken)\r\n    {\r\n        var threeMinutesAgo = DateTime.UtcNow.AddMinutes(-3);\r\n        var staleApprovedRequests = await _requestRepository.GetAllAsync(r =>\r\n            r.Status == RequestStatus.Approved &&\r\n            r.ApprovedAt.HasValue &&\r\n            r.ApprovedAt.Value < threeMinutesAgo);\r\n        \r\n        Console.WriteLine("The Background Job is running //////////////////////////////////////");\r\n        \r\n        foreach (var request in staleApprovedRequests)\r\n        {\r\n            try\r\n            {\r\n                await UpdateRequestStatus(request.Id, RequestStatus.Rejected, \r\n                    "Auto-rejected: Approved for more than 3 minutes without completion");\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                await LogError(request.Id, $"Error rejecting stale request: {ex.Message}");\r\n            }\r\n        }\r\n    }\r\n\r\n    [TickerFunction("CreateReport")]\r\n    public async Task CreateReport(TickerFunctionContext tickerContext, CancellationToken cancellationToken)\r\n    {\r\n        var report = new Report\r\n        {\r\n            Title = $"Scheduled Report - {DateTime.UtcNow:yyyy-MM-dd HH:mm}",\r\n            Content = $"This is an automatically generated report created at {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}",\r\n            CreatedAt = DateTime.UtcNow\r\n        };\r\n\r\n        await _reportRepository.AddAsync(report);\r\n        await _reportRepository.SaveAsync();\r\n        logger.LogInformation($"Report created with ID: {report.Id}");\r\n    }\r\n\r\n    private async Task UpdateRequestStatus(Guid requestId, RequestStatus newStatus, string reason)\r\n    {\r\n        var request = await _requestRepository.GetAsync(r => r.Id == requestId);\r\n        if (request == null) return;\r\n\r\n        request.Status = newStatus;\r\n        \r\n        switch (newStatus)\r\n        {\r\n            case RequestStatus.Approved: request.ApprovedAt = DateTime.UtcNow; break;\r\n            case RequestStatus.Completed: request.CompletedAt = DateTime.UtcNow; break;\r\n            case RequestStatus.Rejected: request.RejectedAt = DateTime.UtcNow; break;\r\n        }\r\n\r\n        _requestRepository.Update(request);\r\n\r\n        var log = new RequestLog\r\n        {\r\n            RequestId = requestId,\r\n            Action = $"Status changed to {newStatus}: {reason}"\r\n        };\r\n        await _logRepository.AddAsync(log);\r\n        await _logRepository.SaveAsync();\r\n    }\r\n\r\n    private async Task LogError(Guid requestId, string errorMessage)\r\n    {\r\n        var log = new RequestLog\r\n        {\r\n            RequestId = requestId,\r\n            Action = $"Error: {errorMessage}"\r\n        };\r\n        await _logRepository.AddAsync(log);\r\n        await _logRepository.SaveAsync();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"time-based-jobs",children:"Time-based Jobs"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'using System.Drawing;\r\nusing TickerQ.Utilities.Base;\r\nusing TickerQ.Utilities.Models;\r\n\r\nnamespace Application.Jobs;\r\n\r\npublic class JobWithData\r\n{\r\n    [TickerFunction("CleanUp")]\r\n    public void CleanUp(TickerFunctionContext<Point> ticker)\r\n    {\r\n        Console.WriteLine($"X: {ticker.Request.X}, Y: {ticker.Request.Y}");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"exception-handler",children:"Exception Handler"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'using TickerQ.Utilities.Base;\r\nusing TickerQ.Utilities.Enums;\r\nusing TickerQ.Utilities.Interfaces;\r\n\r\nnamespace TickerQ_Demo.Services;\r\n\r\npublic class TickerExceptionHandler(ILogger<TickerExceptionHandler> logger) : ITickerExceptionHandler\r\n{\r\n    public async Task HandleExceptionAsync(Exception exception, Guid tickerId, TickerType tickerType)\r\n    {\r\n        Console.WriteLine($"\ud83d\udea8 EXCEPTION - ID: {tickerId}, Type: {tickerType}, Error: {exception.Message}");\r\n        logger.LogError(exception, "TickerQ job failed - ID: {TickerId}, Type: {TickerType}", tickerId, tickerType);\r\n        await Task.CompletedTask;\r\n    }\r\n\r\n    public async Task HandleCanceledExceptionAsync(Exception exception, Guid tickerId, TickerType tickerType)\r\n    {\r\n        Console.WriteLine($"\u23f9\ufe0f CANCELLED - ID: {tickerId}, Type: {tickerType}, Reason: {exception.Message}");\r\n        logger.LogWarning("TickerQ job cancelled - ID: {TickerId}, Type: {TickerType}", tickerId, tickerType);\r\n        await Task.CompletedTask;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"api-controllers",children:"API Controllers"}),"\n",(0,t.jsx)(r.h3,{id:"scheduling-time-jobs",children:"Scheduling Time Jobs"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'using Application.DTOs;\r\nusing Application.Services;\r\nusing Domain.Enums;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing System.Drawing;\r\nusing TickerQ.Utilities;\r\nusing TickerQ.Utilities.Interfaces.Managers;\r\nusing TickerQ.Utilities.Models.Ticker;\r\n\r\nnamespace TickerQ_Demo.Controllers;\r\n\r\n[ApiController]\r\n[Route("api/[controller]")]\r\npublic class RequestsController(RequestService _service) : ControllerBase\r\n{\r\n    [HttpPost("Schedule")]\r\n    public async Task<ActionResult> ScheduleBackgroundJobs(Point point, ITimeTickerManager<TimeTicker> manager)\r\n    {\r\n        await manager.AddAsync(new TimeTicker\r\n        {\r\n            Request = TickerHelper.CreateTickerRequest(point),\r\n            ExecutionTime = DateTime.UtcNow.AddSeconds(10),\r\n            Function = "CleanUp",\r\n            Retries = 3,\r\n            RetryIntervals = [1, 2, 3],\r\n            Description = "Job with data example"\r\n        });\r\n        return Ok("Background job scheduled.");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"configuration-files",children:"Configuration Files"}),"\n",(0,t.jsx)(r.h3,{id:"appsettingsjson",children:"appsettings.json"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\r\n  "ConnectionStrings": {\r\n    "DefaultConnection": "Server=YOUR_SERVER;Database=TickerQ;TrustServerCertificate=true;Integrated Security=SSPI"\r\n  },\r\n  "Logging": {\r\n    "LogLevel": {\r\n      "Default": "Information",\r\n      "Microsoft.AspNetCore": "Warning",\r\n      "Microsoft.EntityFrameworkCore.Database.Command": "Warning",\r\n      "Microsoft.EntityFrameworkCore": "Warning"\r\n    }\r\n  },\r\n  "TickerQBasicAuth": {\r\n    "username": "admin",\r\n    "password": "admin"\r\n  },\r\n  "CronTicker": {\r\n    "EveryMinute": "* * * * *"\r\n  },\r\n  "AllowedHosts": "*"\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"project-file-csproj",children:"Project File (.csproj)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Project Sdk="Microsoft.NET.Sdk.Web">\r\n  <PropertyGroup>\r\n    <TargetFramework>net10.0</TargetFramework>\r\n    <Nullable>enable</Nullable>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.10" />\r\n    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.10">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n    </PackageReference>\r\n    <PackageReference Include="Swashbuckle.AspNetCore" Version="9.0.6" />\r\n    <PackageReference Include="TickerQ" Version="2.5.3" />\r\n    <PackageReference Include="TickerQ.Dashboard" Version="2.5.3" />\r\n    <PackageReference Include="TickerQ.EntityFrameworkCore" Version="2.5.3" />\r\n  </ItemGroup>\r\n</Project>\n'})}),"\n",(0,t.jsx)(r.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(r.h3,{id:"repository-pattern",children:"Repository Pattern"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"public interface IRepository<T> where T : class\r\n{\r\n    Task<T?> GetAsync(Expression<Func<T, bool>> predicate);\r\n    Task<IEnumerable<T>> GetAllAsync(Expression<Func<T, bool>>? predicate = null);\r\n    Task AddAsync(T entity);\r\n    void Update(T entity);\r\n    Task SaveAsync();\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"service-registration-1",children:"Service Registration"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"// Repository DI\r\nbuilder.Services.AddScoped(typeof(IRepository<>), typeof(Repository<>));\r\n\r\n// Services DI\r\nbuilder.Services.AddScoped<RequestService>();\r\nbuilder.Services.AddScoped<BackgroundJobs>();\n"})}),"\n",(0,t.jsx)(r.h3,{id:"dependency-injection",children:"Dependency Injection"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"public class BackgroundJobs(\r\n    IRepository<RequestEntity> _requestRepository, \r\n    IRepository<RequestLog> _logRepository, \r\n    IRepository<Report> _reportRepository, \r\n    ILogger<RequestEntity> logger)\r\n{\r\n    // Constructor parameters are automatically injected\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Use primary constructors"})," for dependency injection"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Register all job classes"})," in the DI container"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Handle exceptions"})," in job methods"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Use CancellationToken"})," for cancellation support"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Log job execution"})," for monitoring"]}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.strong,{children:"Configure appropriate retry strategies"})}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Use meaningful job names"})," and descriptions"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Test exception scenarios"})," thoroughly"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Monitor job performance"})," via dashboard"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Keep jobs lightweight"})," and focused"]}),"\n"]})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var i=n(6540);const t={},s=i.createContext(t);function o(e){const r=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);